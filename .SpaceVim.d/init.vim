" Dark powered mode of SpaceVim, generated by SpaceVim automatically.
let g:spacevim_enable_plugins=0
"let g:spacevim_neobundle_installed=0
"let g:spacevim_dein_installed=0
"let g:spacevim_vim_plug_installed=0

let g:spacevim_realtime_leader_guide = 1
call SpaceVim#layers#load('incsearch')
call SpaceVim#layers#load('lang#c')
call SpaceVim#layers#load('lang#elixir')
call SpaceVim#layers#load('lang#go')
call SpaceVim#layers#load('lang#haskell')
call SpaceVim#layers#load('lang#java')
call SpaceVim#layers#load('lang#javascript')
call SpaceVim#layers#load('lang#lua')
call SpaceVim#layers#load('lang#perl')
call SpaceVim#layers#load('lang#php')
call SpaceVim#layers#load('lang#python')
call SpaceVim#layers#load('lang#rust')
call SpaceVim#layers#load('lang#swig')
call SpaceVim#layers#load('lang#tmux')
call SpaceVim#layers#load('lang#vim')
call SpaceVim#layers#load('lang#xml')
call SpaceVim#layers#load('shell')   
call SpaceVim#layers#load('tools#screensaver')
let g:spacevim_enable_vimfiler_welcome = 1
let g:spacevim_enable_debug = 1
let g:deoplete#auto_complete_delay = 150
let g:spacevim_enable_tabline_filetype_icon = 1
let g:spacevim_enable_statusline_display_mode = 0
let g:spacevim_enable_os_fileformat_icon = 1
let g:spacevim_buffer_index_type = 1
let g:neomake_vim_enabled_makers = []
if executable('vimlint')
    call add(g:neomake_vim_enabled_makers, 'vimlint') 
endif
if executable('vint')
    call add(g:neomake_vim_enabled_makers, 'vint') 
endif
"if has('python3')
    "let g:ctrlp_map = ''
"    nnoremap <silent> <C-p> :Denite file_rec<CR>
"endif
let g:clang2_placeholder_next = ''
let g:clang2_placeholder_prev = ''

set ignorecase

"=======================================================custom by ay
call plug#begin('~/.local/share/nvim/plugged')
"Plug 'https://github.com/dbgx/lldb.nvim.git'
"Plug 'https://github.com/kangol/vim-pudb.git'
"Plug 'https://github.com/gotcha/vimpdb.git'
Plug 'https://github.com/idanarye/vim-vebugger.git'
"Plug 'https://github.com/valloric/YouCompleteMe.git', {'for':'python'}
"Plug 'https://github.com/vim-scripts/taglist.vim.git'
Plug 'https://github.com/python-mode/python-mode.git'
"Plug 'https://github.com/Yggdroot/LeaderF.git'
Plug 'https://github.com/szw/vim-maximizer.git'
Plug 'https://github.com/simeji/winresizer.git'
"Plug 'https://github.com/haya14busa/vim-gtrans.git'
"Plug 'https://github.com/haya14busa/gtrans.git'
"*Plug 'https://github.com/ervandew/maximize.git'
"*Plug 'https://github.com/spolu/dwm.vim.git'
"*Plug 'https://github.com/ddrscott/vim-window.git'
"*Plug 'https://github.com/pthrasher/conqueterm-vim.git'
"Plug 'https://github.com/gotcha/vimpdb.git'
"Plug 'https://github.com/wincent/terminus.git'
"Plug 'https://github.com/christoomey/vim-system-copy.git'
call plug#end()

"===========custom ay plugin
"for fpath in split(globpath('~/.SpaceVim.d/ay/ay-bufonly/', '*'), '\n')
for fpath in split(globpath('~/.SpaceVim.d/ay/*/', '*.vim'), '\n')
  exe 'source' fpath
endfor

autocmd BufNewFile,BufRead * set filetype=python "noexpandtab tabstop=2 shiftwidth=2  

"call SpaceVim#layers#load('flygrep')   

"let g:vebugger_leader = "]"
"if exists('g:vebugger_leader')
"	if !empty(g:vebugger_leader)
		for s:mapping in items({
					\'<F10>':'VBGstepIn',
					\'<F9>':'VBGstepOver',
					\'<F8>':'VBGstepOut',
					\'<F5>':'VBGcontinue',
					\'<F4>':'VBGtoggleTerminalBuffer',
					\'<F7>':'VBGtoggleBreakpointThisLine',
					\']B':'VBGclearBreakpints',
					\'<F6>':'VBGevalWordUnderCursor',
					\']E':'exe "VBGeval ".input("VBG-Eval> ")',
					\']x':'exe "VBGexecute ".getline(".")',
					\']X':'exe "VBGexecute ".input("VBG-Exec> ")',
					\']R':'exe "VBGrawWrite ".input("VBG> ")'})
			exe 'nnoremap '.s:mapping[0].' :'.s:mapping[1].'<Cr>'
		endfor
		for s:mapping in items({
					\']e':'VBGevalSelectedText',
					\']x':'VBGexecuteSelectedText',
					\']r':'VBGrawWriteSelectedText'})
			exe 'vnoremap '.s:mapping[0].' :'.s:mapping[1].'<Cr>'
		endfor
"	endif
"endif

"let tags ="~/.vim/tags/python3.6.ctags"
"let tags += "/home/ay/ay/app/anaconda3_2/envs/tensorflow-nightly_pip/lib/python3.6/site-packages/tags"

"let Tlist_Show_One_File = 1
"
"let g:ycm_python_binary_path = '/home/ay/ay/app/anaconda3_2/envs/tensorflow-nightly_pip/bin/python3.6'
"let g:ycm_server_python_interpreter = "/home/ay/ay/app/anaconda3_2/envs/tensorflow-nightly_pip/bin/python3.6"


"python-mode
"开启警告
let g:pymode_warnings = 0
"保存文件时自动删除无用空格
let g:pymode_trim_whitespaces = 1
let g:pymode_options = 1
"显示允许的最大长度的列
let g:pymode_options_colorcolumn = 0
"设置QuickFix窗口的最大，最小高度
let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 10
"使用python3
let g:pymode_python = 'python3'
"使用PEP8风格的缩进
let g:pymode_indent = 1
"取消代码折叠
let g:pymode_folding = 1
"开启python-mode定义的移动方式
let g:pymode_motion = 1
"启用python-mode内置的python文档，使用K进行查找
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
"自动检测并启用virtualenv
let g:pymode_virtualenv = 1
"不使用python-mode运行python代码
let g:pymode_run = 1
"let g:pymode_run_bind = '<Leader>r'
"不使用python-mode设置断点
let g:pymode_breakpoint = 1
"let g:pymode_breakpoint_bind = '<leader>b'
"启用python语法检查
let g:pymode_lint = 0
"修改后保存时进行检查
let g:pymode_lint_on_write = 0
"编辑时进行检查
let g:pymode_lint_on_fly = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8']
"发现错误时不自动打开QuickFix窗口
let g:pymode_lint_cwindow = 0
"侧边栏不显示python-mode相关的标志
let g:pymode_lint_signs = 0
"let g:pymode_lint_todo_symbol = 'WW'
"let g:pymode_lint_comment_symbol = 'CC'
"let g:pymode_lint_visual_symbol = 'RR'
"let g:pymode_lint_error_symbol = 'EE'
"let g:pymode_lint_info_symbol = 'II'
"let g:pymode_lint_pyflakes_symbol = 'FF'
"启用重构
let g:pymode_rope = 1
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0

"不在父目录下查找.ropeproject，能提升响应速度
let g:pymode_rope_lookup_project = 0
"光标下单词查阅文档
let g:pymode_rope_show_doc_bind = '<C-c>d'
"项目修改后重新生成缓存
let g:pymode_rope_regenerate_on_write = 1
"开启补全，并设置<C-Tab>为默认快捷键
let g:pymode_rope_completion_bind = '<C-Tab>'
"<C-c>g跳转到定义处，同时新建竖直窗口打开
let g:pymode_rope_goto_definition_bind = '<C-c>g'
let g:pymode_rope_goto_definition_cmd = 'vnew'
"重命名光标下的函数，方法，变量及类名
let g:pymode_rope_rename_bind = '<C-c>rr'
"重命名光标下的模块或包
let g:pymode_rope_rename_module_bind = '<C-c>r1r'
"开启python所有的语法高亮
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
"高亮缩进错误
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
"高亮空格错误
let g:pymode_syntax_space_errors = g:pymode_syntax_all


"let g:loaded_ctrlp = 0
let g:ctrlp_by_filename = 1
let g:ctrlp_arg_map = 1 

let g:vimfiler_as_default_explorer = 0

"au VimEnter * NERDTree
"let g:NERDTreeWinSize = 28
"au VimEnter * VimFiler

"au VimEnter * TagbarOpen
let g:tagbar_width = 20

let g:spacevim_enable_debug = 1

let g:spacevim_lint_on_save            = 0

let g:spacevim_autocomplete_method = 'deoplete'

"let g:unite_source_line_enable_highlight = 1


"====================================================tabs wins
function! MergeTab()
    let bufnums = tabpagebuflist()
    hide tabclose
    topleft vsplit
    for n in bufnums
        execute 'sbuffer ' . n
        wincmd _
    endfor
    wincmd t
    quit
    wincmd =
endfunction
command! AyMergeTab call MergeTab()

function MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc
command! AyMoveToPrevTab call MoveToPrevTab()

function MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
  else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc
command! AyMoveToNextTab call MoveToPrevTab()

"=================================dwm 
command! DWMRotateCounterclockwise call DWM_Rotate(0)
command!  DWMRotateClockwise        call DWM_Rotate(1)

command! DWMNew   call DWM_New()
command! DWMClose exec DWM_Close()
command! DWMFocus call DWM_Focus()

command! DWMGrowMaster   call DWM_GrowMaster()
command! DWMShrinkMaster call DWM_ShrinkMaster()

"==================================vim-window
" Unimpaired mapping
command! VWrotatePre call window#rotate(-1 * v:count1)
command!  VWrotateNex call window#rotate(1 * v:count1)

" Improve window exchange to work with all layouts
command!  VWexchange call window#exchange(v:count)

" [g]lue windows together.
"    l = glue to right side
"    h = glue to left side
"    j = glue to bottom
"    k = glue to top
"
" `normal! 100zh` scrolls window contents into view since it gets messy when
" narrower window tries refocuses its cursor.
command!  VWrightbelowVsplit call window#join('rightbelow vsplit', v:count) "<BAR>normal! 100zh<CR>
command!  VWleftaboveVsplit call window#join('leftabove vsplit', v:count)  "<BAR>normal! 100zh<CR>
command!  VWbelowrightSplit call window#join('belowright split', v:count)  "<BAR>normal! 100zh<CR>
command!  VWaboveleftSplit call window#join('aboveleft split', v:count)   "<BAR>normal! 100zh<CR>

" Force a primary window layout.
" The capital HJKL forces the primary window to a specific direction.
command! -nargs=* LayoutH call window#layout('ball', 'H', <args>)
command! -nargs=* LayoutJ call window#layout('vertical ball', 'J', <args>) 
command! -nargs=* LayoutK call window#layout('vertical ball', 'K', <args>) 
command! -nargs=* LayoutL call window#layout('ball', 'L', <args>)

" Map the layout commands to something if that's your style.
command! VWlayoutBallRight LayoutH v:count
command! VWlayoutVerticalBallUp LayoutJ v:count
command! VWlayoutVerticalBallDown LayoutK v:count
command! VWlayoutBallLeft LayoutL v:count

" Improve window only, to split to new tab instead
command! VWonly call window#only()


let g:syntax_on = 1
syntax on


"command! -bar AyUndoClear exe "set ul=-1 | m-1 | let &ul=" . &ul

set noundofile
set nobackup
set noswapfile

set modifiable

set tags+=/home/ay/ay/app/anaconda3_2/envs/tensorflow-nightly_pip/lib/python3.6/site-packages/tags
